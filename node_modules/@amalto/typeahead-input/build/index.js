"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
require("typeahead.js");
var helpers_1 = require("@amalto/helpers");
var classNames = require("classnames");
var TypeaheadInput = (function (_super) {
    __extends(TypeaheadInput, _super);
    function TypeaheadInput(props) {
        var _this = _super.call(this, props) || this;
        _this.handleInputBlur = function (event) {
            var _a = _this.props, display = _a.display, value = _a.value, handleInputChange = _a.handleInputChange;
            if (!event.target.value) {
                handleInputChange(null);
            }
            else {
                $(_this.state.typeaheadInputId).typeahead('val', display ? display(value) : value);
            }
        };
        _this.initialiazeCollection = function (collection) {
            var _a = _this.props, remote = _a.remote, id = _a.id, value = _a.value, handleInputChange = _a.handleInputChange, display = _a.display, datumTokenizer = _a.datumTokenizer;
            var typeaheadInputId = _this.state.typeaheadInputId;
            var _collection = new Bloodhound({
                initialize: false,
                datumTokenizer: datumTokenizer || Bloodhound.tokenizers.whitespace,
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                local: collection,
                remote: remote
            });
            _collection.initialize();
            $(typeaheadInputId).typeahead({
                hint: true,
                highlight: true,
                minLength: 1
            }, {
                name: id,
                source: _collection,
                limit: Infinity,
                display: display
            });
            $(typeaheadInputId).typeahead('val', display ? display(value) : value);
            $(typeaheadInputId).bind('typeahead:select', (function (__event, suggestion) {
                handleInputChange(suggestion);
            }));
        };
        _this.setTypeaheadClass = function () {
            if (_this.state.shouldDisplayDropdown) {
                $(_this.state.typeaheadInputId).parent().css('width', '77%');
                $(_this.state.typeaheadInputId).parent().css('margin-right', '3%');
                $(_this.state.typeaheadInputId).parent().css('float', 'left');
            }
        };
        _this.updateCollection = function (collection) {
            $(_this.state.typeaheadInputId).typeahead('destroy');
            _this.initialiazeCollection(collection);
            _this.setTypeaheadClass();
        };
        _this.state = {
            typeaheadInputId: "#" + _this.props.id + "_typeahead",
            shouldDisplayDropdown: helpers_1.isNotEmpty(props.selectedCollectionType) && !!props.collectionTypes && !!props.setCollectionType
        };
        return _this;
    }
    TypeaheadInput.prototype.render = function () {
        var _a = this.props, id = _a.id, selectedCollectionType = _a.selectedCollectionType, collectionTypes = _a.collectionTypes, setCollectionType = _a.setCollectionType;
        var shouldDisplayDropdown = this.state.shouldDisplayDropdown;
        return (React.createElement("div", { id: id, className: 'clearfix' },
            React.createElement("input", { className: 'form-control typeahead', id: id + "_typeahead", type: 'text', onBlur: this.handleInputBlur, name: id, placeholder: this.props.placeholder }),
            shouldDisplayDropdown ? (React.createElement("div", { className: 'btn btn-group btn-group-sm mgt-0 mgl-0 padding-none input-suffix' },
                React.createElement("button", { type: 'button', className: 'btn btn-info dropdown-toggle full-width ellipsis', "data-toggle": 'dropdown' },
                    React.createElement("span", { className: 'right-spaced' }, selectedCollectionType),
                    React.createElement("span", { className: 'caret', style: {
                            right: 5,
                            position: 'absolute',
                            top: '50%'
                        } })),
                React.createElement("ul", { className: 'dropdown-menu' }, collectionTypes.map(function (type) { return (React.createElement("li", { key: "collection-" + type + "-line", className: classNames({
                        'active': selectedCollectionType === type
                    }) },
                    React.createElement("a", { href: '#', onClick: function (e) {
                            e.preventDefault();
                            setCollectionType(type);
                        } }, type))); })))) : null));
    };
    TypeaheadInput.prototype.componentDidMount = function () {
        this.initialiazeCollection(this.props.collection);
        this.setTypeaheadClass();
    };
    TypeaheadInput.prototype.componentWillUnmount = function () {
        $(this.state.typeaheadInputId).typeahead('destroy');
    };
    TypeaheadInput.prototype.componentDidUpdate = function (prevProps) {
        var _a = this.props, display = _a.display, value = _a.value;
        if (prevProps.value !== value) {
            $(this.state.typeaheadInputId).typeahead('val', display ? display(value) : value);
        }
        if (prevProps.collection !== this.props.collection) {
            this.updateCollection(this.props.collection);
        }
    };
    return TypeaheadInput;
}(React.Component));
exports.default = TypeaheadInput;
//# sourceMappingURL=index.js.map